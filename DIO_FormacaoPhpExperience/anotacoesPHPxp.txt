

imagem com php e apache
FROM debian

RUN  apt-get update && apt-get install php -y \
	apache2 \
	libapache2-mod-php \
	php && apt-get clean

EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]


Tratamento de excecões
	InvalidArgumentException
		quando tem uma entrada de tipo não esperado
		
	throw
		lançar
	try
		tentar
	catch
		captura
	finally
		exibir informação por exemplo
		
ctrl g no vscode permite indicar a linha para debugar

Debug
	warning e notice, não interrompem a execução do sistema
	Parse error - erros de sintaxe
	Fatal error - tentativas de uso de funções e classes não definidas
	
	para exibir no pho.ini
		display_errors: ON
		error_reporting: E_ALL
		
	Reprodução > Diagnóstico > Correção > Reflexão
	
	tracing : echo, var_dump()
	
	XDebug 

Hierarquia
	Throwable
       /\       /\
   Error	Exception
   		/\     /\
   	1RuntimeEx	2LogicEx > SPL = Standard PHP Library
   
   1 UnexpectedValueException
   	quando um valor não corresponde a um conjunto de valores
   1 UnderFlowException
   	tentativa de acessar um valor de um recipiente que está vazio
   1 RandeException
   	erros de aritmética
   1 OverFlowException
   	tentativa de inserir elementos em um recipiente cheio
   1 OutOfBoundsException
   	chave inválida
   2 OutOfRangeException
   	indices inválidos
   2 LengthException
   	tamanhos inválidos
   2 InvalidArgumentException
   	argumento não é do tipo esperado
   2 DomainException
   	dados que não correspondem ao domínio
   2 BadFunctionCallException
   	problemas na chamada da função como parametros ausentes ou não definida
   	2 BadMethodCallException
   		argumentos ou metodos não definidos
   		
   		
GitHub

Todo código-fonte desenvolvido durante o curso foi versionado no GitHub, nos seguintes endereços:

https://github.com/roseneidesantos 

https://github.com/roseneidesantos/dio-aulas-excecoes.git 

https://github.com/roseneidesantos/dio-aulas-tratamento-de-excecoes.git

Bons estudos 

Composer
	reutilização de implementações
	Instalação 
		https://getcomposer.org/download/
			php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
			php composer-setup.php
			php -r "unlink('composer-setup.php');"
			sudo mv composer.phar /usr/local/bin/composer
	composer init
		vai criar arquivo de configuração
			composer.json
	Gerenciamento de dependencias
		packagist.org
			mpdf/mpdf 
			
		contexto dev
			no json "require-dev": {}
				dependencias necessárias na etapa de desenvolvimento, por exemplo os testes unitarios
		$ composer require mpdf/mpdf
		
		pode ser inseridas as dependencias no json e depois rodar o $ composer install
		
	composer.lock
		armazena a versão das dependencias usadas no projeto
	composer update
		muda o composer.lock
	composer remove
		remove dependencias
	vendor/autoload.php
	
	Dockerfile
		FROM debian

		RUN apt-get update && apt-get upgrade -y && apt-get install php -y && apt-get install p7zip-full -y && apt-get install git -y && apt-get clean

		EXPOSE 80
	
	index.php
		<?php

		require __DIR__ . "/vendor/autoload.php";
	
		$mpdf = new \Mpdf\Mpdf();
		$mpdf->WriteHTML('<h1>Hello world!</h1>');
		$mpdf->Output();
	
	
	http://github.com/lafraga93/composer-dio
	
Orientação a objetos:
	Abstracao:
		para entender quais os componentes que compoem a solução na vida real
		
	Classes e objetos
		Classes são sempre iniciadas com letra maiuscula
		
	Namespaces
		configuração do autoload
		é como o nome de um diretório ou pacote
		
	Atributos e metodos
		<?php //ContaBancaria.php

		declare(strict_types=1); //quando o arquivo for interpretado pelo php, vai ser considerado o tipo

		namespace App;

		class ContaBancaria
		{
			//atributos
			public string $banco = "Bradesco";
			public string $nomeTitular = "Paulo Plinio";
			public string $numeroAgencia = "8244";
			public string $numeroConta = "57354-10";
			public float $saldo = 0;
	
			//metodos
			public function exibirDadosDaConta(): array
			{
				return [
					'banco' => $this->banco,
					'nomeTitular' => $this->nomeTitular,
					'numeroAgencia' => $this->numeroAgencia,
					'numeroConta' => $this->numeroConta,
					'saldo' => $this->saldo,
				];
			}
		}
		
		<?php //objetoContaBancaria.php

		require __DIR__ . '/../vendor/autoload.php';

		use App\ContaBancaria;

		$conta = new ContaBancaria();

		var_dump($conta->exibirDadosDaConta());

		
		Exibindo apenas $conta no var_dump
		root@2ae77ef17d61:/home/composer# php debug/objetoContaBancaria.php 
		object(App\ContaBancaria)#4 (5) {
		  ["banco"]=>
		  string(8) "Bradesco"
		  ["nomeTitular"]=>
		  string(12) "Paulo Plinio"
		  ["numeroAgencia"]=>
		  string(4) "8244"
		  ["numeroConta"]=>
		  string(8) "57354-10"
		  ["saldo"]=>
		  float(0)
		}
		root@2ae77ef17d61:/home/composer# vim ./debug/objetoContaBancaria.php
		Exibindo o array
		root@2ae77ef17d61:/home/composer# php debug/objetoContaBancaria.php 
		array(5) {
		  ["banco"]=>
		  string(8) "Bradesco"
		  ["nomeTitular"]=>
		  string(12) "Paulo Plinio"
		  ["numeroAgencia"]=>
		  string(4) "8244"
		  ["numeroConta"]=>
		  string(8) "57354-10"
		  ["saldo"]=>
		  float(0)
		}
		
	Encapsulamento
		restringir o acesso a implementação da classe
		Visibilidade
			publica - normalmente usado para métodos
				public function exibirDadosDaConta(): array 
				{
				}
			protegida - usado em classes herdeiras
				protected float $saldo = 0;
			privada - normalmente para atributos
				private string $nomeTitular = "Paulo Plinio";
					acessivel apenas pelo metodo dentro da classe
					
	Getter e Setters
		assim como não se pode obter diretamente atributos privados também não é possível defini-los
		setter permitem alterar o valor de um atributo
		getter permitem acessar o valor de um atributo
		
	Metodo contrutor
		faz o set de todos os atibutos de uma só vez
		public function __construct(atributos){como no set}
		
	Herança
		Objetos tem a possibilidade de herdar comportamento e atributo de outros
		pode existir uma classe abstrata base e outras que são herdeiras
	
	Polimorfismo
		um mesmo objeto que herda algo de uma classe base pode ter um comportamento diferente
		Contratos
			interface OperacoesConta {}
				
				na classe base
					abstract class ContaBancariaBase implements OperacoesConta {}
					
				no objeto
					function executarOperacao(OperacoesConta, $conta): void	

	https://github.com/lafraga93/php-oo-dio

Orientação a objetos e baco de dados
	paradigmas: procedural/estruturada, funcional, orientada a objetos
	
	Classes
		representação do objeto
		
		<?php
		
		class NomeDaClasse
		{
		
		}
		
	Objeto
		uma instância da classe
		
		<?php
		
		$nomeDoObjeto = new NomeDaClasse();
	
	Propriedades / atributos
		Tudo que a classe possui
		
		<?php
		
		class NomeDaClasse
		{
			$atributo1;
			$segundoAtributo;
		}
	Visibilidade
		Modificadores de acesso: define a visibilidade dos elementos da classe (public, private, protected)
	
		<?php
		
		class NomeDaClasse
		{
			public $atributo1;
			private $segundoAtributo;
		}
	Acesso
		<?php
		
		var_dump($nomeDoObjeto->segundoAtributo);
	Metodos / ações / funções
		<?php
		
		class NomeDaClasse
		{
			public function executarMetodo()
			{
				return "Metodo executado";
			} 
		}
		
		var_dump($nomeDoObjeto->executarMetodo());
		
		Metodo construtor
			sempre executado quando instancia a classe, ele vai receber os atributos passados quando instanciada a classe
			
			public function __construct($atributoPassado)
			{
				$this->atributo1 = $atributoPassado;
			}
			
		$nomeDoObjeto = new NomeDaClasse('Atributo Passado');
	
	Tipagem
		<?php
		
		declare(strict_types=1);
		
		class NomeDaClasse
		{
			/**
			* @var string
			**/
			public $atributo1;
			
			private string $segundoAtributo; //a partir do php 7.4
		
			public function __construct(string $atributoPassado): string
			{
				$this->atributo1 = $atributoPassado;
			}
		
		}
		
		
	
	
	
	
