Ambiente linux

    xampp instalado em /opt/lampp

    subir o xampp 127.0.0.1

    aplicação em 127.0.0.1/PHPFundamentos para rodar no navegador
        /opt/lampp/htdocs/PHPFundamentos

    depois de concluir as aulas copiar os arquivos para o diretório de backup e subir no github

Recomendações:
    nunca deixar o phpinfo na raiz e com esse nome, é uma falha de segurança

Tag PHP

    <?php
    
    ?>

O interpretador do navegador não entende PHP apenas mostra o retorno dele como html

O PHP tem tipagem dinâmica - não precisa declarar o tipo
		Tipagem fraca - o tipo pode ser alterado
	o nome da variavel começa com $ e usa-se snake_case
	
Recomendado para constantes usar upper case
	define("ESCOLA", "Treinaweb");
	const CURSO = "PHP"; //só funciona no escopo global
	
Tipos de dados escalares
	strings - $nome = "Iuri";
	inteiro - $idade = 31;
	float/double - $preço = 39.90;
	booleano - $resultado = true;
	
	gettype($nome) - para verificar o tipo
	var_dump($nome) - usado para debugar
	
Tipos de dados compostos
	armazena uma sequencia de dados
	
	arrays - $linguagens = ["PHP", "JavasScript"];
	
	Sintaxe antiga - $linguagens = array("PHP", "JavaScript");
	
	arrays associativos
	
	$curso = ["nome_curso" => "PHPfundamentos", "versao" => 7.4, "carga_horaria" => 40, "status" => true];
	
	arrays multidimensionais
	
	$numeros = [[1, 2, 3 , 4], [6, 7, 8, 9], ["dez", "onze", "doze"]];
	
	
Operador de comparacao
	<> e != sao o operador diferente
	!== diferente incluindo o tipo
	== comparador de igualdade
	=== comparador de igualdade inclusive o tipo
	
Operador de concatenacao
	$nome_completo = $nome . " " . $sobrenome;
	
" " permite o uso de algum interpolacao dentro da string como o uso do conteudo de uma variavel
' ' quando não for usar uma string sem nada a ser interpretado, eh considerada uma micro otimização
	
	
É recomendados que os arquivos PHP tenham somente declarações ou apenas saídas
	
	
PHP-FIG - PSRs - php-fig.org
	padrões Framework interop group
		php standards recommendations
			Os status:
			rascunho
			aceita
			descontinuada
			abandonada
			
			Recomendação
			MUST, REQUIRED, SHALL - obrigatóro
			MUST NOT, SHALL NOT - Proibido
			SHOULD, RECOMMENDED - Recomendado
			SHOULD NOT, NOT RECOMMENDED - não recomendado
			MAY, OPTIONAL - Opcional
	
PSR-1
	Codificação Básica
	MUST - tags - <?php ?> e <?= ?>
	MUST - charset - UTF-8 sem BOM
	SHOULD - arquivos com apenas declarações ou apenas saídas
	entre outros
PSR-12 substituiu a PSR-2
	Estilo de código
	MUST - PSR-1
	MUST - LF no final da linha  e não inserir nova linha no final
	MUST - não deve fechar a tag ?>
	MUST - linhas com menos de 120 caracteres
	SHOULD NOT - mais 80 caracteres na linha
	MUST NOT - duas instruções ou mais por linha
	MUST NOT - inserir caractere em branco no final da linha
	MAY - adicionar linhas em branco para legibilidade
	MUST - 4 espaços no tab para identação
	MUST - palavras reservadas em minusculo
	MUST NOT - espaço apos o nome da função
	MUST - chaves dos blocos de funções deve estar sozinhas numa linha
	MUST NOT - espaço depois dos parenteses das funções
	entre outros


PHP POO 1
	
	Dentro de um mesmo arquivo podem ser declaradas quantas classes desejar mas a PSR recomenda uma classe em seu arquivo próprio
	
	constantes são nomeadas em caixa alta e sem $
	
	para instanciar é preciso primeiro importar o aquivo da classe
	
	new é o operador para instaciar a classe
	-> chama um atributo da classe
	
	O instanciamento dinâmico pode gerar erros caso não se tenha atenção com as chamadas de métodos ou parametros nas trocas de classe
	
	copiar um objeto sem clona-lo pode ser útil para criar um novo objeto sem saber a classe que da origem a ele
	
	sandbox.onlinephpfunctions.com
	
	O conceito de refência ( & ) indica o mesmo lugar de memoria onde estão armazenados os dados
		$a = 1
		$b = $a
		$b = 2
		
		não vai mudar a variavel a
		
		$a = 1
		$b = &$a //passagem por referencia
		$b = 2
		
		ambas variáveis serão alteradas
	
	Declaração em tempo de execução pode ser perigosa por que pode acessar propriedades não definidas, ou seja, gera baixa confiabilidade do objeto por que insere propriedades fora do esperado no inicio do tipo de dado


stdClass é um classe vazia e sem metodos e propriedades, é generica e pose ser usada por exemplo para transporte de dados entre outros - podem ser usadas propriedades dinâmicas - o PHP usa essa classe para converter um array para um objeto

classe anônima - pode ser usada para enviar um objeto para outro lugar










TW-FormaçaoDevPHP-POOparte1 revisando até Propriedades em tempo de execução (Goking)
