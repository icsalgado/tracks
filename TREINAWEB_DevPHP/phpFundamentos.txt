https://github.com/treinaweb/treinaweb-php-fundamentos

~~ Características da linguagem PHP

O PHP é uma linguagem de programação server-side interpretada. Possui tipagem dinâmica e fraca; Sintaxe baseada nas linguagens C, C++, Java e Perl. Seu principal objetivo é o desenvolvimento de aplicações web e que utilizam o protocolo HTTP, mas também permite a criação de aplicações console.

É possível programar em diversos paradigmas utilizando a linguagem PHP, dentre eles podemos destacar procedural, orientado a objetos, reflexão e funcional. O paradigma mais utilizado hoje, com certeza, é o orientado a objetos, já o paradigma funcional é o menos utilizado, já que a linguagem ainda não implementa todos os recursos necessários para utilização plena dele.

A linguagem PHP é open source e mantida pela comunidade, a maioria dos desenvolvedores que trabalham nela, não possui nenhum tipo de ganho financeiro direto. Outra importante característica é ser multiplataforma. Programas PHP podem ser interpretados nos principais sistemas operacionais (Linux, MacOs ou Windows), sendo que grande parte dos servidores que possuem sistemas PHP em funcionamento utilizam o sistema operacional Linux.

~~ História do PHP

A linguagem PHP foi concebida durante o outono de 1994 por Rasmus Lerdorf.

As primeiras versões não foram disponibilizadas, sendo utilizadas em sua home-page apenas para que ele pudesse ter informações sobre as visitas que eram feitas. A primeira versão utilizada por outras pessoas foi disponibilizada em 1995 e ficou conhecida como “Personal Home Page Tools” (ferramentas para página pessoal).

Era composta por um sistema bem simples, que interpretava algumas macros e alguns utilitários que rodavam “por trás” das home-pages: um livro de visitas, um contador e algumas coisas mais.

Em meados de 1995 o interpretador foi reescrito e ganhou o nome de PHP/FI. O “FI” veio de outro pacote escrito por Rasmus, que interpretava dados de formulários HTML (Form Interpreter). Ele combinou os scripts do pacote Personal Home Page Tools com o FI e adicionou suporte a mySQL, nascendo assim o PHP/FI, que passou a receber contribuições de várias pessoas e cresceu bastante.

~~ O que é possível fazer com PHP

Com o PHP você consegue desenvolver diversos tipos de aplicações.

    Formulários: de contato, cadastro, e-mail e etc.;
    E-commerce: lojas virtuais;
    Sites dinâmicos: páginas com alimentação de dados via Banco de Dados;
    Sistemas complexos: Administração de conteúdo, gerenciamento de servidores, usuários e etc.;
    Protocolos: PHP tem suporte a outros serviços através de protocolos como IMAP, SNMP, NNTP, POP3 e, logicamente, HTTP. Ainda é possível abrir sockets e interagir com outros protocolos. Suporte ao padrão XML (SAX, DOM, XSLT).

Vantagens de se trabalhar com PHP

O PHP é Multiplataforma. Aceita vários sistemas operacionais como:

    Linux;
    Mac OS;
    Windows.

Permite a conexão direta com grande quantidade de Banco de Dados (relacionais e não-relacionais) como:

    MySQL;
    PostgreSQL;
    MS SQL Server;
    Oracle;
    MongoDB;
    Etc.

É suportado pela maioria dos servidores Web que existem no mercado:

    NGINX;
    APACHE;
    IIS;
    PWS.

~~ Lado cliente e lado servidor

Os Client-side scripts, ou scripts do lado do cliente, são responsáveis pelas ações executadas no navegador. Um exemplo é o uso de JavaScript para verificação de formulários (se o campo foi preenchido, como verificação de CPF, CEP e etc.) ou tratamento de eventos com o mouse (ao clicar, executar tal operação, ao passar o mouse, ao digitar, etc.).

Os Server-side scripts, ou scripts do lado do servidor, são responsáveis pelas ações executadas no servidor e o cliente (usuário) não enxerga o que está sendo processado. A busca de uma informação ou o cadastro em um banco de dados é feito no lado do servidor por alguma linguagem de programação.

PHP é server-side, ou seja, ele trabalha dentro do servidor respondendo as requisições realizadas pelos clientes.

Veja um esquema de funcionamento para uma aplicação web:

Acompanhe a descrição textual dos passos, usando o esquema cima:

    (1) O cliente (você) acessa o site: http://www.treinaweb.com.br/ ;
    (2) O servidor recebe essa requisição e o PHP está configurado para rodar nesse servidor. A requisição é encaminhada do servidor para o interpretador do PHP;
    (3) O interpretador do PHP executa o script cursos.php;
    (4) O script cursos.php possui códigos para acesso ao banco de dados que retorna a lista de cursos;
    (5) O PHP retorna esse resultado, organizado, para o servidor que retorna para o navegador (cliente).

Geralmente chamamos o que trabalha no client-side de front-end e o que trabalha no server-side de back-end. Temos um artigo muito legal em nosso blog falando sobre esses 2 conceitos: https://www.treinaweb.com.br/blog/o-que-e-front-end-e-back-end/


Estima-se que, em 1996, o PHP/FI foi usado por cerca de 15.000 sites pelo mundo, subindo para mais de 50.000 em meados de 1997. Nesse período houve uma mudança no desenvolvimento do PHP, que deixou de ser um projeto de Rasmus com contribuições de outras pessoas para ter uma equipe de desenvolvimento mais organizada. O interpretador foi reescrito por Zeev Suraski e Andi Gutmans, tornando-se a base para a versão 3 do PHP.

A sintaxe do PHP é derivada principalmente da linguagem C, apesar de ter recebido também influência do Perl, sendo bem flexível e fácil de ser aplicada.

O PHP 3 foi oficialmente lançado em junho de 1998, depois de ter passado aproximadamente 9 meses em testes públicos. Os objetivos do projeto eram melhorar a performance de aplicações complexas e melhorar a modularidade do código-base do PHP. Tais aplicações foram possíveis devido às novas características do PHP 3.0 e ao suporte à variedade de banco de dados de terceiros e APIs. Porém, o PHP 3.0 não foi projetado para trabalhar de forma eficiente com aplicações muito complexas.

A nova engine, intitulada de 'Zend Engine' (nome originado da junção de Zeev e Andi) e introduzida em meados de 1999, obteve sucesso. O PHP 4, baseado nesta engine e acompanhado por uma série de novas características, foi oficialmente lançado em maio de 2000, quase dois anos após o seu predecessor, o PHP 3.0.

Além do altíssimo melhoramento da performance dessa versão, o PHP 4.0 incluiu outras características-chave como suporte para muitos servidores Web, sessões HTTP, buffer de saída, maneiras mais seguras de manipular input de usuários e muitas construções novas na linguagem.

A versão 5 foi lançada em julho de 2004 após longo desenvolvimento e vários pré-releases, essa versão foi muito importante para a evolução da linguagem. Ela introduziu no core a Zend Engine 2.0 com um novo modelo de orientação a objetos e várias outras características importantes da linguagem, que fizeram o PHP se popularizar muito no desenvolvimento web.

Em 2005 Andrei Zmievski iniciou o desenvolvimento do projeto que seria a versão 6 da linguagem, a principal mudança seria o suporte a unicode. O projeto acabou não dando certo devido a falta de desenvolvedores e problemas de desempenho. As novidades que seriam lançadas na versão 6 acabaram sendo divididas entre as versões 5.3 e 5.4 com datas de lançamento 2009 e 2010 respectivamente.

No ano de 2011 a empresa Facebook criou uma máquina virtual chamada HHVM. Essa máquina virtual permitia rodar o PHP muito mais rápido do que o interpretador do próprio PHP. Com um número crescente de servidores mudando para HHVM a comunidade se viu pressionada a melhorar a performance da linguagem.

Em 2015 então finalmente foi lançada a nova versão do PHP, chamado de PHP 7. A versão 6 acabou precisando ser pulada, porque existiam artigos e até livros sobre a versão que acabou não sendo lançada. O PHP 7 trouxe a Zend Engine 3 e muitas melhorias, principalmente em questão de desempenho e uso de memória, em alguns casos o mesmo projeto passou a ser 2x mais rápido simplesmente migrando para a nova versão.

Desde então, foram lançadas as versões 7.1, 7.2, 7.3 e 7.4 da linguagem. Sendo que a última versão 7.4 trouxe recursos bem interessantes como, preloading, que permite carregar partes inteiras do código para o cache, melhorando o desempenho, Arrow Functions, propriedades tipadas e outros recursos que vamos conhecer na nossa formação.

No momento, a versão 8 da linguagem está em desenvolvimento. Ela utilizará Just-in-time JIT para deixar a linguagem ainda mais performática do que a versão 7, além de melhorar diversos aspectos, o que torna a linguagem PHP uma das mais promissoras do mercado.

